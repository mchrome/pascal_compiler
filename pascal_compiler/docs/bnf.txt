<program> ::= program <identifier>;<block>.|<block>.
<block> ::= <typeDeclarationPart><varDeclarationPart><funcionDeclarationPart><statementPart>

<typeDeclarationPart> ::= <empty> | type <typeDeclaration>; {<typeDeclaration>;}
<typeDeclaration> ::= <identifier> = <type>
<type> ::= <identifier>

<varDeclarationPart>::= <empty> | var <varDeclaration>; {<varDeclaration>;}
<varDeclaration> ::= <identifier> {,<identifier>} : <type>

<funcionDeclarationPart> ::= {<funcionDeclaration>;}
<funcionDeclaration> ::= <functionHeading> <block>
<functionHeading> ::= function <identifier>:<type>; |
function <identifier>(<formalParameterSection>{;<formalParameterSection>}):<type>;

<formalParameterSection> ::= <empty> | <parameterGroup> | var <parameterGroup>
<parameterGroup> ::= <identifier>{,<identifier>}: <type>

<statementPart> ::= begin <compoundStatement> end
<compoundStatement> ::=  <empty> | <statement>{;<statement>} 
<statement> ::= <simpleStatement>|<structuredStatement>
<simpleStatement> ::= <assignmentStatement>

<assignmentStatement> ::= <variable> := <expression>
<variable> ::= <identifier>

<expression> ::= <simpleExpression>{<relationalOperator><simpleExpression>}
<relationalOperator> ::= <|>|>=|<=|=|<>

<simpleExpression> ::= <term>{<addingOperator><term>}
<addingOperator> ::= + | - | or | xor

<term> ::= <factor>{<multiplyingOperator><factor>}
<multiplyingOperator> ::= * | / | and

<factor> ::= <variable> | <unsignedConst> | (<expression>) | <functionDesignator> | <unaryOperator><factor>
<unaryOperator> ::= + | - | not | @

<unsignedConst> ::= <unsignedNumber> | <stringConst>
<unsignedNumber> ::= <unsignedInteger> | <unsignedReal>

<functionDesignator> ::= <identifier>() | <identifier>(<actualParameter>{,<actualParameter>})

<actualParameter> ::= <expression>|<empty>

<empty> ::=

<structuredStatement> ::= <ifStatement>|<whileStatement>|<caseStatement>

<ifStatement> ::= if <expression> then <statement> | if<expression> then <statement> else <statement>
<whileStatement> ::= while <expression> do <statement>
<caseStatement> ::= case <expression> of <case list element> {; <case list element> } end
<caseListElement> ::= <empty> | <unsignedConst>{, <unsignedConst> } : <statement>